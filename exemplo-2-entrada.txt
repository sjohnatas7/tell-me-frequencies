INTRODUCTION
Message-passing parallel programs are a usual resource in computer solutions requiring high performance, such as data analysis, energy research, bio-engineering processing, and other real-world problems.
Message-passing parallel programsrequire performance, reliability, and accuracy, which is essential to ensure quality.
Research projects from the academy and software industry are adapting the software testing for the context of message-passing parallel programs.
Nondeterminism in message-passing parallel programs is a challenge for testing activity, since the execution of these programs with the same test dataset can generate different outputs. 
Such behavior is given because it is possible that distinct synchronization pairs occur during programexecutions. Consequently, one of themain concerns when testing parallel programs is to exercise different synchronizations, to verify if the expected results remain correct.
Another aspect to consider and still open for the testing of message-passing parallel programs are loop structures, which are usually applied when coding and have high potential to hide defects. 8,9 
It is necessary to analyze the behavior of parallel programming primitives inside of loops, searching for unknown defects in control, data, and communication flows among processes.
Structural testing is one of the techniques for the validation and verification of parallel programs. 11 It supports the revelation of defects associated with communication events by analyzing the internal structure of a program. 
A test model establishes a method to extract the source code’s necessary information, giving support for testing criteria. Testing criteria are a set of rules for generating required elements that must be covered, based on the control, data, communication, and synchronization flows of parallel programs. Such required elements guide the selection of test cases (input and output data of programs under testing) to reveal defects. However, infeasible-elements can hinder satisfying testing criteria. A required element is infeasible if there is no input data to cover it by an execution. Finding infeasible paths in a program is an undetermined problem. 12
Testing techniques with no structured test models might lead to the generation of redundant or ineffective test cases, increasing costs, and preventing the identification of parallel errors. The implementation of robust testing methods can diminish the impact of faults caused by a lack of software quality, avoiding future and more expensive software development efforts. Therefore, it is imperative to guide the testing activity by criteria to ensure the quality of parallel programs. Some studies define structural testing criteria for message-passing parallel programs,3,13,14 but they do not address defects from communication primitives present in loop structures.
This article presents a new set of structural testing criteria that considers the execution of specific communication events inside loops in message-passing parallel programs.We address fundamental challenges when message-passing parallel programs communicate in this context of loop structures, analyze bugs related to communication events into loops, and extend both a test model3 and a software testing tool15 to support the testing activity.
Our test model considers behavioral aspects of loops execution in message-passing parallel programs to reduce the test cost by selecting the sequence of events where the criteria can reveal more defects.We address important considerations and implications for generating required elements, evaluation of coverage, and identification of loops to implement the new criteria. Besides, we verify the applicability of the new criteria by executing experimental studies that use a benchmark ofMPI programs with different communication patterns, loop structures, and complexities.
The results allow us to verify the effectiveness of the criteria and costs for their test execution application.
We show how to use our testing criteria to generate the required elements, and guide the selection of test cases capable of revealing defects.
We assume there is no difference between the terms parallel and concurrent for the context of the article, and we employ them as synonyms.
Hereafter, the term “parallel program” refers to “message-passing parallel program and communication” or “synchronization” when alone, can refer to “communication and synchronization” for short.
The article's content follows this organization: Section 2 presents the previous work (background) on structural testing of parallel programs.
The problem and challenges concerning this study are in Section 3. Section 4 presents the new test modelwith definitions, associations, testing criteria, and the implementation in ValiMPI. The experimental study and evaluation of the results through statistical methods are present in Section 5.
Section 6 discusses relatedwork comparing them with our proposal. Section 7 brings our concluding remarks and description of future work.
CONCLUSION AND FUTURE WORK
This article proposes new structural testing criteria for message-passing parallel programs, focusing on defects from communication primitives into loops. We contemplated nondeterminism and communication events present in the loop structures of a parallel program. The construction of testing criteria considered the analysis of four main factors: (a) types of bugs related to parallelism; (b) types of loops and the paths traversing them; (c number of iterations of the loops; and (d) the presence of nested loops and their impact on the generation of required elements.
Themain contribution of this work is a developed technique to cover message-passing parallel programs considering loop execution. Our loop testing criteria aim to reveal defects related to communication events occurring in different loop iterations,which are generally difficult to identify.
The theory behind our criteria gives the necessary support for a testing methodology responsible for generating required elements. The required elements guide the choice of test cases, improving the quality of parallel programs while reducing the testing activity cost.
We implemented the proposed testing criteria in the ValiMPI tool to automate the generation of required elements and coverage evaluation.
The tool was used to support the experimental evaluation of the proposed criteria. Our results show the application of criteria, as well as the viability DIAZ ET AL. 17 of 18 of their use when testing message-passing programs.We showed that the criteria help to reveal concurrency defects in communication events in loops. Statistical analyses provide accuracy to our conclusions that are based on the results and the hypotheses validation.
As future research,weintend to focus on structural testing criteria for shared-memory programs, extending the test model of Sarmanho et al.,22 considering the execution of loops. The program representation and paradigm differ from distributed memory programs and, therefore, it should require a different analysis and development. Testing criteria regarding recursive functions and collective communication primitives is also an open topic requiring research effort.
